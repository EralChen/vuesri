import{W as d,S as p,s as N,j as h,X as u,by as y}from"./chunk-8J0p1hu6.js";import{t as I}from"./chunk-Kd557ewq.js";class v{constructor(){this._serviceMetadatas=new Map}async fetchServiceMetadata(a,t){const r=this._serviceMetadatas.get(a);if(r)return r;const n=await I(a,t);return this._serviceMetadatas.set(a,n),n}}function l(e){const a={id:e.id,name:e.name};return e.type==="Oriented Imagery Layer"&&(a.layerType="OrientedImageryLayer"),a}async function b(e,a,t){if(e?.layers==null||e?.tables==null){const r=await t.fetchServiceMetadata(a);(e=e||{}).layers=e.layers||r?.layers?.map(l),e.tables=e.tables||r?.tables?.map(l)}return e}function M(e){const a=e.layers;if(a?.length)return a[0].id;const t=e.tables;return t?.length?t[0].id:null}function m(e){return(e?.layers?.length??0)+(e?.tables?.length??0)}function g(e){const a=[];return e?.layers?.forEach(t=>{t.layerType==="SubtypeGroupLayer"&&a.push(t.id)}),a}function T(e){return e?.layers?.filter(({layerType:a})=>a==="OrientedImageryLayer").map(({id:a})=>a)}async function G(e,a,t){if(!e?.url)return a??{};if(a??={},!a.layers){const s=await t.fetchServiceMetadata(e.url);a.layers=s.layers?.map(l)}const{serverUrl:r,portalItem:n}=await d(e.url,{sceneLayerItem:e}).catch(()=>({serverUrl:null,portalItem:null}));if(r==null)return a.tables=[],a;if(!a.tables&&n){const s=await n.fetchData();if(s?.tables)a.tables=s.tables.map(l);else{const c=await t.fetchServiceMetadata(r);a.tables=c?.tables?.map(l)}}if(a.tables)for(const s of a.tables)s.url=`${r}/${s.id}`;return a}async function $(e){!e.portalItem||e.portalItem instanceof p||(e={...e,portalItem:new p(e.portalItem)});const a=await F(e.portalItem);return new a.constructor({portalItem:e.portalItem,...a.properties})}async function F(e){await e.load();const a=new v;return j(await L(e,a))}async function L(e,a){switch(e.type){case"Map Service":return C(e,a);case"Feature Service":return O(e,a);case"Feature Collection":return V(e);case"Scene Service":return W(e,a);case"Image Service":return _(e,a);case"Stream Service":return K();case"Vector Tile Service":return U();case"GeoJson":return k();case"CSV":return D();case"KML":return x();case"WFS":return A();case"WMTS":return J();case"WMS":return E();case"Feed":return P();case"Group Layer":return R();default:throw new N("portal:unknown-item-type","Unknown item type '${type}'",{type:e.type})}}async function j(e){const a=e.className,t=h[a];return{constructor:await t(),properties:e.properties}}async function C(e,a){return await z(e,a)?{className:"TileLayer"}:{className:"MapImageLayer"}}async function O(e,a){const t=await w(e,a);if(typeof t=="object"){const r={};return t.id!=null&&(r.layerId=t.id),{className:t.className||"FeatureLayer",properties:r}}return{className:"GroupLayer"}}async function W(e,a){const t=await w(e,a,async()=>{try{if(!e.url)return[];const{serverUrl:r}=await d(e.url,{sceneLayerItem:e});return(await a.fetchServiceMetadata(r))?.tables??[]}catch{return[]}});if(typeof t=="object"){const r={};let n;if(t.id!=null?(r.layerId=t.id,n=`${e.url}/layers/${t.id}`):n=e.url,e.typeKeywords?.length){for(const c of Object.keys(u))if(e.typeKeywords.includes(c))return{className:u[c]}}const s=await a.fetchServiceMetadata(n);return{className:u[s?.layerType]||"SceneLayer",properties:r}}return t===!1&&(await a.fetchServiceMetadata(e.url))?.layerType==="Voxel"?{className:"VoxelLayer"}:{className:"GroupLayer"}}async function V(e){await e.load();const a=y(e,"Map Notes"),t=y(e,"Markup");if(a||t)return{className:"MapNotesLayer"};if(y(e,"Route Layer"))return{className:"RouteLayer"};const r=await e.fetchData();return m(r)===1?{className:"FeatureLayer"}:{className:"GroupLayer"}}async function _(e,a){await e.load();const t=e.typeKeywords?.map(o=>o.toLowerCase())??[];if(t.includes("elevation 3d layer"))return{className:"ElevationLayer"};if(t.includes("tiled imagery"))return{className:"ImageryTileLayer"};const r=await e.fetchData(),n=r?.layerType;if(n==="ArcGISTiledImageServiceLayer")return{className:"ImageryTileLayer"};if(n==="ArcGISImageServiceLayer")return{className:"ImageryLayer"};const s=await a.fetchServiceMetadata(e.url),c=s.cacheType?.toLowerCase(),i=s.capabilities?.toLowerCase().includes("tilesonly");return c==="map"||i?{className:"ImageryTileLayer"}:{className:"ImageryLayer"}}function K(){return{className:"StreamLayer"}}function U(){return{className:"VectorTileLayer"}}function k(){return{className:"GeoJSONLayer"}}function D(){return{className:"CSVLayer"}}function x(){return{className:"KMLLayer"}}function A(){return{className:"WFSLayer"}}function E(){return{className:"WMSLayer"}}function J(){return{className:"WMTSLayer"}}function P(){return{className:"StreamLayer"}}function R(){return{className:"GroupLayer"}}async function z(e,a){return(await a.fetchServiceMetadata(e.url)).tileInfo}async function w(e,a,t){const r=e.url;if(!r||/\/\d+$/.test(r))return{};await e.load();let n=await e.fetchData();if(e.type==="Feature Service"){const c=await b(n,r,a),i=f(c);if(typeof i=="object"){const o=g(c),S=T(c);i.className=i.id!=null&&o.includes(i.id)?"SubtypeGroupLayer":i.id!=null&&S?.includes(i.id)?"OrientedImageryLayer":"FeatureLayer"}return i}if(e.type==="Scene Service"&&(n=await G(e,n,a)),m(n)>0)return f(n);const s=await a.fetchServiceMetadata(r);return t&&(s.tables=await t()),f(s)}function f(e){return m(e)===1&&{id:M(e)}}const B=Object.freeze(Object.defineProperty({__proto__:null,fromItem:$,selectLayerClassPath:L},Symbol.toStringTag,{value:"Module"}));export{L,b as a,v as e,G as i,m as l,g as n,B as p,M as r,T as s,l as t};
