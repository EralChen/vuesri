import{_ as p}from"./chunk-t4TbIqUg.js";import{bc as m,bd as b,be as g,bf as w,bg as T,bh as f,bi as S,s as _,bj as $,U as d,bk as I,bl as O,bm as c,$ as s,a0 as o,bn as h,bo as E,bp as j,a2 as D,ao as L}from"./chunk-xdbuWCSg.js";let r=class extends m(b(g(w(T(L))))){constructor(...t){super(...t),this.capabilities={operations:{supportsTileMap:!1}},this.copyright=null,this.heightModelInfo=null,this.path=null,this.minScale=void 0,this.maxScale=void 0,this.opacity=1,this.operationalLayerType="ArcGISTiledElevationServiceLayer",this.sourceJSON=null,this.type="elevation",this.url=null,this.version=null,this._lercDecoder=f()}normalizeCtorArgs(t,i){return typeof t=="string"?{url:t,...i}:t}destroy(){this._lercDecoder=S(this._lercDecoder)}readCapabilities(t,i){const e=i.capabilities&&i.capabilities.split(",").map(a=>a.toLowerCase().trim());return e?{operations:{supportsTileMap:e.includes("tilemap")}}:{operations:{supportsTileMap:!1}}}readVersion(t,i){let e=i.currentVersion;return e||(e=9.3),e}load(t){const i=t!=null?t.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"],supportsData:!1,validateItem:e=>{if(e.typeKeywords){for(let a=0;a<e.typeKeywords.length;a++)if(e.typeKeywords[a].toLowerCase()==="elevation 3d layer")return!0}throw new _("portal:invalid-layer-item-type","Invalid layer item type '${type}', expected '${expectedType}' ",{type:"Image Service",expectedType:"Image Service Elevation 3D Layer"})}},t).catch($).then(()=>this._fetchImageService(i))),Promise.resolve(this)}fetchTile(t,i,e,a){const l=(a=a||{signal:null}).signal!=null?a.signal:a.signal=new AbortController().signal,u={responseType:"array-buffer",signal:l},v={noDataValue:a.noDataValue,returnFileInfo:!0};return this.load().then(()=>this._fetchTileAvailability(t,i,e,a)).then(()=>d(this.getTileUrl(t,i,e),u)).then(n=>this._lercDecoder.decode(n.data,v,l)).then(n=>new I(n))}getTileUrl(t,i,e){const a=!this.capabilities.operations.supportsTileMap&&this.supportsBlankTile,l=O({...this.parsedUrl.query,blankTile:!a&&null});return`${this.parsedUrl.path}/tile/${t}/${i}/${e}${l?"?"+l:""}`}async queryElevation(t,i){const{ElevationQuery:e}=await p(()=>import("./chunk-PH67w6fd.js"),__vite__mapDeps([0,1,2,3]));return c(i),new e().query(this,t,i)}async createElevationSampler(t,i){const{ElevationQuery:e}=await p(()=>import("./chunk-PH67w6fd.js"),__vite__mapDeps([0,1,2,3]));return c(i),new e().createSampler(this,t,i)}_fetchTileAvailability(t,i,e,a){return this.tilemapCache?this.tilemapCache.fetchAvailability(t,i,e,a):Promise.resolve("unknown")}async _fetchImageService(t){if(this.sourceJSON)return this.sourceJSON;const i={query:{f:"json",...this.parsedUrl.query},responseType:"json",signal:t},e=await d(this.parsedUrl.path,i);e.ssl&&(this.url=this.url?.replace(/^http:/i,"https:")),this.sourceJSON=e.data,this.read(e.data,{origin:"service",url:this.parsedUrl})}get hasOverriddenFetchTile(){return!this.fetchTile[y]}};s([o({readOnly:!0})],r.prototype,"capabilities",void 0),s([h("service","capabilities",["capabilities"])],r.prototype,"readCapabilities",null),s([o({json:{read:{source:"copyrightText"}}})],r.prototype,"copyright",void 0),s([o({readOnly:!0,type:E})],r.prototype,"heightModelInfo",void 0),s([o({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],r.prototype,"path",void 0),s([o({type:["show","hide"]})],r.prototype,"listMode",void 0),s([o({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}},readOnly:!0})],r.prototype,"minScale",void 0),s([o({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}},readOnly:!0})],r.prototype,"maxScale",void 0),s([o({json:{read:!1,write:!1,origins:{"web-document":{read:!1,write:!1}}}})],r.prototype,"opacity",void 0),s([o({type:["ArcGISTiledElevationServiceLayer"]})],r.prototype,"operationalLayerType",void 0),s([o()],r.prototype,"sourceJSON",void 0),s([o({json:{read:!1},value:"elevation",readOnly:!0})],r.prototype,"type",void 0),s([o(j)],r.prototype,"url",void 0),s([o()],r.prototype,"version",void 0),s([h("version",["currentVersion"])],r.prototype,"readVersion",null),r=s([D("esri.layers.ElevationLayer")],r);const y=Symbol("default-fetch-tile");r.prototype.fetchTile[y]=!0;const x=r;export{x as default};
function __vite__mapDeps(indexes) {
  if (!__vite__mapDeps.viteFileDeps) {
    __vite__mapDeps.viteFileDeps = ["assets/chunks/chunk-PH67w6fd.js","assets/chunks/chunk-xdbuWCSg.js","assets/chunks/chunk-t4TbIqUg.js","assets/static/ShadedColorMaterial.LVqRbJ38.css"]
  }
  return indexes.map((i) => __vite__mapDeps.viteFileDeps[i])
}
