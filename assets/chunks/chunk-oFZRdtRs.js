import{oB as M,kO as V,lU as c,aP as y,n7 as I,aF as m,$ as T,a2 as _}from"./chunk-gZYsZ36N.js";import{i as F}from"./chunk-iPxuUnvs.js";let P=class extends M{constructor(e,i,s,r,a,o,n=null){super(e,i,s,r,a,o),this.bitmap=new V(n),this.bitmap.coordScale=[a,o],this.bitmap.once("isReady",()=>this.ready())}destroy(){super.destroy(),this.bitmap.destroy()}beforeRender(e){this.bitmap.beforeRender(e),super.beforeRender(e)}afterRender(e){this.bitmap.afterRender(e),super.afterRender(e)}set stencilRef(e){this.bitmap.stencilRef=e}get stencilRef(){return this.bitmap.stencilRef}_createTransforms(){return{displayViewScreenMat3:c(),tileMat3:c()}}setTransform(e){super.setTransform(e),this.bitmap.transforms.displayViewScreenMat3=this.transforms.displayViewScreenMat3}onAttach(){this.bitmap.stage=this.stage}onDetach(){this.bitmap&&(this.bitmap.stage=null)}},$=class extends F{get requiresDedicatedFBO(){return this.children.some(e=>e.bitmap.blendFunction==="additive")}createTile(e){const i=this._tileInfoView.getTileBounds(y(),e),s=this._tileInfoView.getTileResolution(e.level),[r,a]=this._tileInfoView.tileInfo.size;return new P(e,s,i[0],i[3],r,a)}prepareRenderPasses(e){const i=e.registerRenderPass({name:"bitmap (tile)",brushes:[I.bitmap],target:()=>this.children.map(s=>s.bitmap),drawPhase:m.MAP});return[...super.prepareRenderPasses(e),i]}doRender(e){this.visible&&e.drawPhase===m.MAP&&super.doRender(e)}};const O=t=>{let e=class extends t{attach(){this.view.timeline.record(`${this.layer.title} (BitmapTileLayer) Attach`),this._bitmapView=new $(this._tileInfoView),this.container.addChild(this._bitmapView)}detach(){this.container.removeChild(this._bitmapView),this._bitmapView?.removeAllChildren(),this._bitmapView=null}};return e=T([_("esri.views.2d.layers.BitmapTileLayerView2D")],e),e};function A(t){return t instanceof HTMLImageElement?t.naturalWidth:t.width}function L(t){return t instanceof HTMLImageElement?t.naturalHeight:t.height}function S(t,e,i,s){if(i.level===s.level)return e;const r=t.tileInfo.size,a=t.getTileResolution(i.level),o=t.getTileResolution(s.level);let n=t.getLODInfoAt(s.level);const p=n.getXForColumn(s.col),u=n.getYForRow(s.row);n=t.getLODInfoAt(i.level);const f=n.getXForColumn(i.col),b=n.getYForRow(i.row),l=A(e)/r[0],h=L(e)/r[1],w=Math.round(l*((p-f)/a)),g=Math.round(h*(-(u-b)/a)),R=Math.round(l*r[0]*(o/a)),v=Math.round(h*r[1]*(o/a)),d=C(r);return d.getContext("2d").drawImage(e,w,g,R,v,0,0,r[0],r[1]),d}function C(t){const e=document.createElement("canvas");return[e.width,e.height]=t,e}export{S as n,C as o,O as r};
