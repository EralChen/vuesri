import{_ as r,$ as s,a1 as u,e3 as $,a2 as k,ad as g,g9 as R,aj as f,P as T,ag as P,s as j,aq as C,cO as E}from"./chunk-AGUgPSYp.js";import{o as G}from"./chunk-3fWQg0J_.js";import{createConnection as x}from"./chunk-BzMTitY5.js";import{r as U}from"./chunk-oQBBGtnK.js";import{E as V}from"./chunk-DI5TfBQ-.js";import{n as F}from"./chunk-tn991xeW.js";import{o as L}from"./chunk-cYR0VbGJ.js";import"./chunk-oVLQlo07.js";import"./chunk-1_thnT0U.js";import"./chunk-4RMLlwyh.js";import"./chunk-XYO2BcRw.js";import"./chunk-SS5GKVPY.js";import"./chunk-J-2NOmOo.js";import"./chunk-E3FRcd7A.js";import"./chunk-YfR_ceww.js";import"./chunk-YNLOY4vG.js";import"./chunk-SDGzCKa6.js";import"./chunk-UUVz3sVw.js";import"./chunk-humpx67F.js";import"./chunk-cdSqQa6L.js";import"./chunk-FQ6JeNDJ.js";import"./chunk-v6EOeNTY.js";import"./chunk-c-Hb2HUP.js";import"./chunk-2Rydd198.js";import"./chunk-1LMYD_Eo.js";const N=2500;let d=class extends T{getObjectId(){return this.objectId}};r([s({type:Number,json:{read:!0}})],d.prototype,"objectId",void 0),d=r([u("esri.layers.graphics.controllers.StreamGraphic")],d);let z=class{constructor(e){this.onUpdate=e,this._idToGraphic=new Map}destroy(){this._idToGraphic.clear()}add(e){this._idToGraphic.set(e.objectId,e)}get(e){return this._idToGraphic.get(e)}forEach(e){this._idToGraphic.forEach(e)}removeById(e){const t=this._idToGraphic.get(e);return t?(t.sourceLayer=t.layer=null,this._idToGraphic.delete(e),t):null}update(e,t){this.onUpdate(e,t)}get size(){return this._idToGraphic.size}},a=class extends $(k){constructor(){super(...arguments),this.isPaused=!1,this.graphics=new U,this._updateInfo={websocket:0,client:0},this._updateIntervalId=null,this._outSpatialReference=null}initialize(){this.addResolvingPromise(this.layer.when(()=>this._startup()))}destroy(){this.clear()}_clearInterval(){this._updateIntervalId!==null&&(clearInterval(this._updateIntervalId),this._updateIntervalId=null)}clear(){this._clearInterval(),this.connection=g(this.connection),this.store=g(this.store),this.graphics.clear(),this.removeAllHandles()}get updating(){return!this.connection||this.connection.connectionStatus==="connected"}_startup(){const{layer:e,layerView:t}=this,{spatialReference:l,definitionExpression:c,geometryDefinition:h,objectIdField:p,timeInfo:_,purgeOptions:v,maxReconnectionAttempts:I,maxReconnectionInterval:w,customParameters:S}=e,b=e.geometryType?R.toJSON(e.geometryType):null,O=l,m=t.view.spatialReference,M={geometry:h,where:c};this.clear(),this._set("connection",x(e.parsedUrl,O,m,b,M,I,w,S??void 0)),this._outSpatialReference=m.toJSON(),this.store=new z(this._onUpdate.bind(this)),this.featuresManager=new G(this.store,p,_.toJSON(),v);const y="startup-watches";this.removeHandles(y),this.addHandles([e.on("send-message-to-socket",n=>this.connection.sendMessageToSocket(n)),e.on("send-message-to-client",n=>this.connection.sendMessageToClient(n)),this.connection.on("data-received",n=>this._onFeature(n)),this.connection.on("message-received",n=>this._onWebSocketMessage(n)),f(()=>[e.definitionExpression,e.geometryDefinition,e.purgeOptions],()=>this._startup())],y),this.isPaused||this._initUpdateInterval()}_onWebSocketMessage(e){if(this.layerView.emit("message-received",e),"type"in e)switch(e.type){case"delete":if(e.objectIds)for(const t of e.objectIds)this.featuresManager.removeById(t);if(e.trackIds)for(const t of e.trackIds)this.featuresManager.removeByTrackId(t);break;case"clear":this.store.forEach(t=>this.featuresManager.removeById(t.objectId))}}_onFeature(e){this._updateInfo.websocket++,this.layerView.hasEventListener("data-received")&&this.layerView.emit("data-received",{attributes:e.attributes,centroid:e.centroid,geometry:e.geometry});try{e.geometry==null||e.geometry.spatialReference||(e.geometry.spatialReference=this._outSpatialReference);const t=d.fromJSON(e);t.sourceLayer=t.layer=this.layer,this.featuresManager.add(t)}catch{}}_onUpdate(e,t){t!=null&&this.graphics.removeMany(t),e!=null&&(this._updateInfo.client+=e.length,this.graphics.addMany(e))}_initUpdateInterval(){this._clearInterval();const{updateInterval:e}=this.layer;let t=performance.now();this._updateIntervalId=setInterval(()=>{const l=performance.now(),c=l-t;if(c>N){t=l;const h=Math.round(this._updateInfo.client/(c/1e3)),p=Math.round(this._updateInfo.websocket/(c/1e3));this._updateInfo.client=0,this._updateInfo.websocket=0,this.layerView.emit("update-rate",{client:h,websocket:p})}this.featuresManager.checkForUpdates()},e)}pauseStream(){this.isPaused=!0,this._clearInterval()}resumeStream(){this.isPaused=!1,this._initUpdateInterval()}};r([s()],a.prototype,"isPaused",void 0),r([s({constructOnly:!0})],a.prototype,"layer",void 0),r([s({constructOnly:!0})],a.prototype,"layerView",void 0),r([s()],a.prototype,"connection",void 0),r([s({readOnly:!0})],a.prototype,"updating",null),a=r([u("esri.layers.graphics.controllers.StreamController")],a);let o=class extends L(V(F(E))){constructor(){super(...arguments),this.type="stream-3d",this.updatePolicy=P.ASYNC,this.hasZ=!0,this.hasM=!1}initialize(){this.addHandles(f(()=>this.suspended,i=>{this.controller&&this._onSuspendedChange(i)}))}get connectionError(){const i=this.controller?.connection?.errorString;return i?new j("stream-controller",i):null}createQuery(){return new C({outFields:["*"],returnGeometry:!0,outSpatialReference:this.view.spatialReference})}queryLatestObservations(i,e){return this.queryEngine.executeQueryForLatestObservations(this._ensureQuery(i),e?.signal)}get _streamConnectionStatus(){return this.controller?.connection?.connectionStatus??"disconnected"}createController(){return new a({layer:this.layer,layerView:this})}beforeSetController(){}_doPause(){this.controller?.pauseStream()}_doResume(){this.controller?.resumeStream()}};r([s({readOnly:!0})],o.prototype,"updatePolicy",void 0),r([s({readOnly:!0})],o.prototype,"connectionError",null),r([s()],o.prototype,"controller",void 0),r([s({readOnly:!0})],o.prototype,"hasZ",void 0),r([s({readOnly:!0})],o.prototype,"hasM",void 0),r([s({readOnly:!0})],o.prototype,"_streamConnectionStatus",null),o=r([u("esri.views.3d.layers.StreamLayerView3D")],o);const ye=o;export{ye as default};
