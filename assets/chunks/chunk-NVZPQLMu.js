import{hZ as w,V as _,I as T,y as b,_ as s,$ as o,a1 as f,ib as I,bi as L,bj as O,bk as $,bB as x,bl as j,ic as M,d2 as N,ak as A,gR as E,bo as V,id as h,s as d,ie as m,ig as D,L as u,ih as J,ii as P,ij as U,ik as K,il as R,bL as k,br as z,im as C,an as B}from"./chunk-m3jlTyOz.js";import{f as l}from"./chunk-No_FKfhV.js";import"./chunk-bntHIBZM.js";var a;let n=a=class extends w(_.ofType(l)){constructor(e){super(e),this.url=null}clone(){return new a({url:this.url,items:this.items.map(e=>e.clone())})}toJSON(e){return this.toArray().map(t=>t.toJSON(e)).filter(t=>!!t.geometry)}static fromJSON(e,t){const r=new a;for(const p of e)r.add(l.fromJSON(p,t));return r}static async fromUrl(e,t,r){const p={url:T(e),origin:"service"},v=await b(e,{responseType:"json",signal:r?.signal}),S=t.toJSON(),y=[];for(const c of v.data)y.push(l.fromJSON({...c,geometry:{...c.geometry,spatialReference:S}},p));return new a({url:e,items:y})}};s([o({type:String})],n.prototype,"url",void 0),n=a=s([f("esri.layers.support.SceneModifications")],n);const g=n;let i=class extends I(L(O($(x(j(M(B))))))){constructor(...e){super(...e),this.geometryType="mesh",this.operationalLayerType="IntegratedMeshLayer",this.type="integrated-mesh",this.nodePages=null,this.materialDefinitions=null,this.textureSetDefinitions=null,this.geometryDefinitions=null,this.serviceUpdateTimeStamp=null,this.profile="mesh-pyramids",this.modifications=null,this._modificationsSource=null,this.path=null}initialize(){this.addHandles(N(()=>this.modifications,"after-changes",()=>this.modifications=this.modifications,A))}normalizeCtorArgs(e,t){return typeof e=="string"?{url:e,...t}:e}readModifications(e,t,r){this._modificationsSource={url:E(e,r),context:r}}set elevationInfo(e){this._set("elevationInfo",e),this._validateElevationInfo()}async load(e){return this.addResolvingPromise(this._doLoad(e)),this}async _doLoad(e){const t=e?.signal;try{await this.loadFromPortal({supportedTypes:["Scene Service"]},e)}catch(r){V(r)}if(await this._fetchService(t),this._modificationsSource!=null){const r=await g.fromUrl(this._modificationsSource.url,this.spatialReference,e);this.setAtOrigin("modifications",r,this._modificationsSource.context.origin),this._modificationsSource=null}await this._fetchIndexAndUpdateExtent(this.nodePages,t)}beforeSave(){if(this._modificationsSource!=null)return this.load().then(()=>{},()=>{})}async saveAs(e,t){return this._debouncedSaveOperations(h.SAVE_AS,{...t,getTypeKeywords:()=>this._getTypeKeywords(),portalItemLayerType:"integrated-mesh"},e)}async save(){const e={getTypeKeywords:()=>this._getTypeKeywords(),portalItemLayerType:"integrated-mesh"};return this._debouncedSaveOperations(h.SAVE,e)}validateLayer(e){if(e.layerType&&e.layerType!=="IntegratedMesh")throw new d("integrated-mesh-layer:layer-type-not-supported","IntegratedMeshLayer does not support this layer type",{layerType:e.layerType});if(isNaN(this.version.major)||isNaN(this.version.minor))throw new d("layer:service-version-not-supported","Service version is not supported.",{serviceVersion:this.version.versionString,supportedVersions:"1.x"});if(this.version.major>1)throw new d("layer:service-version-too-new","Service version is too new.",{serviceVersion:this.version.versionString,supportedVersions:"1.x"})}_getTypeKeywords(){return["IntegratedMeshLayer"]}_validateElevationInfo(){const e=this.elevationInfo,t="Integrated mesh layers";m(u.getLogger(this),D(t,"absolute-height",e)),m(u.getLogger(this),J(t,e))}};s([o({type:String,readOnly:!0})],i.prototype,"geometryType",void 0),s([o({type:["show","hide"]})],i.prototype,"listMode",void 0),s([o({type:["IntegratedMeshLayer"]})],i.prototype,"operationalLayerType",void 0),s([o({json:{read:!1},readOnly:!0})],i.prototype,"type",void 0),s([o({type:P,readOnly:!0})],i.prototype,"nodePages",void 0),s([o({type:[U],readOnly:!0})],i.prototype,"materialDefinitions",void 0),s([o({type:[K],readOnly:!0})],i.prototype,"textureSetDefinitions",void 0),s([o({type:[R],readOnly:!0})],i.prototype,"geometryDefinitions",void 0),s([o({readOnly:!0})],i.prototype,"serviceUpdateTimeStamp",void 0),s([o({type:g}),k({origins:["web-scene","portal-item"],type:"resource",prefix:"modifications"})],i.prototype,"modifications",void 0),s([z(["web-scene","portal-item"],"modifications")],i.prototype,"readModifications",null),s([o(C)],i.prototype,"elevationInfo",null),s([o({type:String,json:{origins:{"web-scene":{read:!0,write:!0},"portal-item":{read:!0,write:!0}},read:!1}})],i.prototype,"path",void 0),i=s([f("esri.layers.IntegratedMeshLayer")],i);const q=i;export{q as default};
