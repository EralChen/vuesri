import{a3 as b,gH as E,ak as c,_ as h,dM as F,gI as V,gJ as $,gK as C,bm as p,$ as o,a0 as r,a2 as D,gL as I}from"./chunk-gZYsZ36N.js";import{o as A,a as G}from"./chunk-FXgYnIeN.js";import{i as d,r as L,n as v}from"./chunk-T34-mLD-.js";import"./chunk-t4TbIqUg.js";import"./chunk-IMQzums1.js";let a=class extends b{get availability(){return 1}get updating(){return this.layerSource.updating}get _snappingElevationAligner(){const{view:e}=this,{layer:t}=this.layerSource,n=e!=null&&e.type==="3d";if(!n||t.type==="subtype-group")return d();const i=async(s,l)=>(await I(e.whenLayerView(t),l)).elevationAlignPointsInFeatures(s,l);return d(n,{elevationInfo:t.elevationInfo,alignPointsInFeatures:i})}get _snappingElevationFilter(){const{view:e}=this,t=e!=null&&e.type==="3d"&&this.layerSource.layer.type!=="subtype-group";return L(t)}get _symbologySnappingFetcher(){const{view:e}=this,{layer:t}=this.layerSource;return e!=null&&e.type==="3d"&&t.type!=="subtype-group"?v(this._symbologySnappingSupported,async(n,i)=>{const s=await e.whenLayerView(t);return p(i),s.queryForSymbologySnapping({candidates:n,spatialReference:e.spatialReference},i)}):v()}get _symbologySnappingSupported(){return this._layerView3D!=null&&this._layerView3D.symbologySnappingSupported}initialize(){const{view:e}=this,{layer:t}=this.layerSource;e!=null&&e.type==="3d"&&t.type!=="subtype-group"&&(e.whenLayerView(t).then(n=>this._layerView3D=n),this.addHandles([e.elevationProvider.on("elevation-change",({context:n})=>{const{elevationInfo:i}=t;E(n,i)&&this._snappingElevationAligner.notifyElevationSourceChange()}),c(()=>t.elevationInfo,()=>this._snappingElevationAligner.notifyElevationSourceChange(),h),c(()=>this._layerView3D!=null?this._layerView3D.processor?.renderer:null,()=>this._symbologySnappingFetcher.notifySymbologyChange(),h),F(()=>this._layerView3D?.layer,["edits","apply-edits","graphic-update"],()=>this._symbologySnappingFetcher.notifySymbologyChange())]))}constructor(e){super(e),this.view=null,this._layerView3D=null,this._memoizedMakeGetGroundElevation=V(A)}refresh(){}async fetchCandidates(e,t){const{layer:n}=this.layerSource,i=n.source;if(!i?.querySnapping)return[];const s=$(n),l=C(e,this.view?.type??"2d",s),S=await i.querySnapping(l,{signal:t});p(t);const g=e.coordinateHelper.spatialReference,y=await this._snappingElevationAligner.alignCandidates(S.candidates,g,t);p(t);const u=await this._symbologySnappingFetcher.fetch(y,t);p(t);const w=u.length===0?y:[...y,...u],m=this._snappingElevationFilter.filter(l,w),_=this._memoizedMakeGetGroundElevation(this.view,g);return m.map(f=>G(f,_))}};o([r({constructOnly:!0})],a.prototype,"layerSource",void 0),o([r({constructOnly:!0})],a.prototype,"view",void 0),o([r()],a.prototype,"_snappingElevationAligner",null),o([r()],a.prototype,"_snappingElevationFilter",null),o([r()],a.prototype,"_symbologySnappingFetcher",null),o([r()],a.prototype,"_layerView3D",void 0),o([r()],a.prototype,"_symbologySnappingSupported",null),a=o([D("esri.views.interactive.snapping.featureSources.FeatureCollectionSnappingSource")],a);export{a as FeatureCollectionSnappingSource};
