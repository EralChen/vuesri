import{aj as p,s as d,dq as m,as as y,bZ as h,_ as o,$ as a,a1 as f}from"./chunk-m3jlTyOz.js";import S from"./chunk-d6NWFp6d.js";import{e as _}from"./chunk-tQs07CpE.js";import{o as v}from"./chunk-McltYYju.js";import"./chunk-bntHIBZM.js";import"./chunk-oZcAn0fK.js";import"./chunk-CtkSqn65.js";import"./chunk-nu9VKcdO.js";import"./chunk-8z8MVveq.js";import"./chunk-YyPMF0Is.js";import"./chunk-CEMOhUyj.js";import"./chunk-pT1ASav_.js";import"./chunk-VnQNafr9.js";import"./chunk-XqF1XW01.js";import"./chunk-A_S84j2H.js";import"./chunk-1_thnT0U.js";import"./chunk-w9eDVXDP.js";import"./chunk-R9ZRyC3P.js";import"./chunk-LCqZb0rR.js";function c(e,t){if(e==null&&t==null)return null;const r={};return t!=null&&(r.geometry=t.toJSON()),e!=null&&(r.where=e),r}let i=class extends v(S){constructor(){super(...arguments),this.pipelineConnectionStatus="disconnected",this.pipelineErrorString=null,this._enabledEventTypes=new Set}initialize(){this.addHandles([p(()=>this.layer.customParameters,e=>this._proxy.updateCustomParameters(e)),this.layer.on("send-message-to-socket",e=>this._proxy.sendMessageToSocket(e)),this.layer.on("send-message-to-client",e=>this._proxy.sendMessageToClient(e)),p(()=>this.layer.purgeOptions,()=>this._update()),p(()=>this.suspended,this._onSuspendedChange.bind(this))],"constructor")}get connectionError(){return this.pipelineErrorString?new d("stream-controller",this.pipelineErrorString):null}on(e,t){if(Array.isArray(e))return m(e.map(l=>this.on(l,t)));const r=["data-received","message-received"].includes(e);r&&(this._enabledEventTypes.add(e),this._proxy.enableEvent(e,!0));const n=super.on(e,t),s=this;return y(()=>{n.remove(),r&&(s._proxy.closed||s.hasEventListener(e)||s._proxy.enableEvent(e,!1))})}queryLatestObservations(e,t){if(!(this.layer.timeInfo?.endField||this.layer.timeInfo?.startField||this.layer.timeInfo?.trackIdField))throw new d("streamlayer-no-timeField","queryLatestObservation can only be used with services that define a TrackIdField");return this._proxy.queryLatestObservations(this._cleanUpQuery(e),t).then(r=>{const n=h.fromJSON(r);return n.features.forEach(s=>{s.layer=this.layer,s.sourceLayer=this.layer}),n})}detach(){super.detach(),this.pipelineConnectionStatus="disconnected"}get _streamConnectionStatus(){return this.pipelineConnectionStatus}_doPause(){this._proxy?.pauseStream()}_doResume(){this._proxy?.resumeStream()}_createClientOptions(){return{...super._createClientOptions(),setProperty:e=>{this.set(e.propertyName,e.value)}}}_createTileRendererHash(e){const t=`${JSON.stringify(this.layer.purgeOptions)}.${JSON.stringify(c(this.layer.definitionExpression,this.layer.geometryDefinition))})`;return super._createTileRendererHash(e)+t}async _createServiceOptions(){const e=this.layer,{objectIdField:t}=e,r=e.fields.map(u=>u.toJSON()),n=_(e.geometryType),s=e.timeInfo?.toJSON()||null,l=e.spatialReference?e.spatialReference.toJSON():null;return{type:"stream",isPaused:this._isUserPaused,fields:r,fieldsIndex:this.layer.fieldsIndex.toJSON(),geometryType:n,objectIdField:t,timeInfo:s,source:this.layer.parsedUrl,serviceFilter:c(this.layer.definitionExpression,this.layer.geometryDefinition),purgeOptions:this.layer.purgeOptions.toJSON(),enabledEventTypes:Array.from(this._enabledEventTypes.values()),spatialReference:l,maxReconnectionAttempts:this.layer.maxReconnectionAttempts,maxReconnectionInterval:this.layer.maxReconnectionInterval,updateInterval:this.layer.updateInterval,customParameters:e.customParameters}}};o([a()],i.prototype,"pipelineConnectionStatus",void 0),o([a()],i.prototype,"pipelineErrorString",void 0),o([a({readOnly:!0})],i.prototype,"connectionError",null),o([a({readOnly:!0})],i.prototype,"_streamConnectionStatus",null),i=o([f("esri.views.2d.layers.StreamLayerView2D")],i);const j=i;export{j as default};
