import{kb as g,kc as y,kd as _,ke as C,dy as P,kf as w,ew as h,kg as f,kh as O,cJ as R,cU as n,ki as u,kj as k,kk as G,hE as v}from"./chunk-gZYsZ36N.js";function x(d,e,t,s=!1){const r=g(d,e);return r==null?null:(r.hasZ&&!s||t==null||(r.z=y(t,r)??0),r)}function H(d,e,t){t.warnOnce(`Failed to project analysis geometry (id: '${d.id}'), projection from spatial reference (wkid: '${e.wkid}') to view spatial reference is not supported. Projection may be possible after calling projection.load().`)}class F extends _{constructor(e,t){super(e),this._hasExternalMaterial=!1,this._hasExternalMaterial=t!=null,this._material=t??new C({width:1,color:P(1,0,1,1),stippleOffColor:null,stipplePattern:null,stipplePreferContinuous:!0,isClosed:!1,falloff:0,innerColor:null,innerWidth:1,hasPolygonOffset:!1,renderOccluded:w.OccludeAndTransparent,isDecoration:!!e.isDecoration,writeDepth:!0}),this.applyProperties(e)}setGeometryFromRenderSpacePoint(e,t=1e3){this.geometry=[[[e[0]-t,e[1],e[2]],[e[0]+t,e[1],e[2]]],[[e[0],e[1]-t,e[2]],[e[0],e[1]+t,e[2]]],[[e[0],e[1],e[2]-t],[e[0],e[1],e[2]+t]]]}setGeometryFromExtent(e){const t=this.view.spatialReference,s=n(),r=n(),a=100,o=[];h(s,e[0],e[1],a),this.view.renderCoordsHelper.toRenderCoords(s,t,r),o.push([r[0],r[1],r[2]]),h(s,e[2],e[1],a),this.view.renderCoordsHelper.toRenderCoords(s,t,r),o.push([r[0],r[1],r[2]]),h(s,e[2],e[3],a),this.view.renderCoordsHelper.toRenderCoords(s,t,r),o.push([r[0],r[1],r[2]]),h(s,e[0],e[3],a),this.view.renderCoordsHelper.toRenderCoords(s,t,r),o.push([r[0],r[1],r[2]]),h(s,e[0],e[1],a),this.view.renderCoordsHelper.toRenderCoords(s,t,r),o.push([r[0],r[1],r[2]]),h(s,e[0],e[1],a),this.view.renderCoordsHelper.toRenderCoords(s,t,r),o.push([r[0],r[1],r[2]]),this.geometry=[o]}setGeometryFromFrustum(e){const t=[];e.lines.forEach(s=>{t.push([s.origin[0],s.origin[1],s.origin[2]]),t.push([s.endpoint[0],s.endpoint[1],s.endpoint[2]])}),this.geometry=[t]}setGeometryFromBoundedPlane(e){const t=[],s=e.origin,r=e.basis1,a=e.basis2,o=.5,i=n(),l=n(),p=n(),m=n();i[0]=s[0]-r[0]*o-a[0]*o,i[1]=s[1]-r[1]*o-a[1]*o,i[2]=s[2]-r[2]*o-a[2]*o,l[0]=s[0]-r[0]*o+a[0]*o,l[1]=s[1]-r[1]*o+a[1]*o,l[2]=s[2]-r[2]*o+a[2]*o,p[0]=s[0]+r[0]*o+a[0]*o,p[1]=s[1]+r[1]*o+a[1]*o,p[2]=s[2]+r[2]*o+a[2]*o,m[0]=s[0]+r[0]*o-a[0]*o,m[1]=s[1]+r[1]*o-a[1]*o,m[2]=s[2]+r[2]*o-a[2]*o,t.push([i[0],i[1],i[2]]),t.push([l[0],l[1],l[2]]),t.push([p[0],p[1],p[2]]),t.push([m[0],m[1],m[2]]),t.push([i[0],i[1],i[2]]),this.geometry=[t]}setGeometryFromSegment(e){const t=e.endRenderSpace;this.transform=f(c,t);const{points:s}=e.createRenderGeometry(t,this.view.renderCoordsHelper);this.geometry=[s]}setGeometryFromSegments(e,t=O){this.transform=f(c,t),this.geometry=e.map(s=>s.createRenderGeometry(t,this.view.renderCoordsHelper).points)}getTransformedGeometry(){return this._geometry==null?null:this._geometry.map(e=>e.map(t=>R(n(),t,this.transform)))}get renderOccluded(){return this._material.parameters.renderOccluded}set renderOccluded(e){this._material.setParameters({renderOccluded:e})}get geometry(){return this._geometry}set geometry(e){this._geometry=e,this.recreateGeometry()}get width(){return this._material.parameters.width}set width(e){this._material.setParameters({width:e})}get color(){return this._material.parameters.color}set color(e){const t=e[3]===1;this._material.setParameters({color:u(e),writeDepth:t})}get innerWidth(){return this._material.parameters.innerWidth}set innerWidth(e){this._material.setParameters({innerWidth:e})}get innerColor(){return this._material.parameters.innerColor}set innerColor(e){this._material.setParameters({innerColor:e!=null?u(e):null})}get stipplePattern(){return this._material.parameters.stipplePattern}set stipplePattern(e){this._material!=null&&this._material.setParameters({stipplePattern:e})}get stippleOffColor(){return this._material.parameters.stippleOffColor}set stippleOffColor(e){this._material.setParameters({stippleOffColor:e!=null?u(e):null})}get stipplePreferContinuous(){return this._material.parameters.stipplePreferContinuous}set stipplePreferContinuous(e){this._material.setParameters({stipplePreferContinuous:e})}get falloff(){return this._material.parameters.falloff}set falloff(e){this._material.setParameters({falloff:e})}get polygonOffset(){return this._material.parameters.hasPolygonOffset}set polygonOffset(e){this._material.setParameters({hasPolygonOffset:e})}createExternalResources(){}destroyExternalResources(){}createGeometries(e){for(const t of k(this.geometry)){const s=G(this._material,t);e.addGeometry(s)}}forEachExternalMaterial(e){this._hasExternalMaterial||e(this._material)}}const c=v();export{F as f,x as r,H as t};
