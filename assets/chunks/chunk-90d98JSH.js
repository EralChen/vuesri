import{u as a}from"./chunk-5LadvCkh.js";import{e as p}from"./chunk-0TguxXne.js";import"./chunk-t4TbIqUg.js";import"./chunk-xdbuWCSg.js";let i,e;async function y(n){if(await f(),n.inputs.length<1)return{result:{status:a.Failed,error:"",jobDescJson:"",data:new Uint8Array(0),missingInputUrls:[]},transferList:[]};const r={ptrs:[],sizes:[]};for(const s of n.inputs){const c=e._malloc(s.byteLength);new Uint8Array(e.HEAPU8.buffer,c,s.byteLength).set(new Uint8Array(s)),r.ptrs.push(c),r.sizes.push(s.byteLength)}const t=e.process(n.jobDescJson,r,n.isMissingResourceCase),u=t.status===a.Succeeded&&t.data,l=t.status===a.MissingInputs&&t.missingInputUrls.length>0;if(u){const s=t.data.slice();t.data=s}else l&&(t.jobDescJson=t.jobDescJson.slice(0),t.originalInputs=n.inputs);for(let s=0;s<r.ptrs.length;++s)e._free(r.ptrs[s]);const o=[];if(u)o.push(t.data.buffer);else if(l)for(const s of n.inputs)o.push(s);return{result:t,transferList:o}}function b(){e&&(e.uninitialize_lyr3d_worker_wasm(),e=null)}function f(){return e?Promise.resolve():(i||(i=p().then(n=>{e=n,e.initialize_lyr3d_worker_wasm(),i=null})),i)}export{b as destroyWasm,f as initialize,y as process};
