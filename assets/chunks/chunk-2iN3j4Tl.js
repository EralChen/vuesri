import{_ as p}from"./chunk-cDR98evz.js";import{bi as m,bj as b,bk as g,bl as w,bm as T,bn as f,bo as S,s as _,bp as $,z as d,bq as I,br as O,B as c,$ as s,a0 as o,bs as h,bt as E,bu as j,a2 as D,ao as L}from"./chunk-ERvgPDZ8.js";let r=class extends m(b(g(w(T(L))))){constructor(...e){super(...e),this.capabilities={operations:{supportsTileMap:!1}},this.copyright=null,this.heightModelInfo=null,this.path=null,this.minScale=void 0,this.maxScale=void 0,this.opacity=1,this.operationalLayerType="ArcGISTiledElevationServiceLayer",this.sourceJSON=null,this.type="elevation",this.url=null,this.version=null,this._lercDecoder=f()}normalizeCtorArgs(e,i){return typeof e=="string"?{url:e,...i}:e}destroy(){this._lercDecoder=S(this._lercDecoder)}readCapabilities(e,i){const t=i.capabilities&&i.capabilities.split(",").map(a=>a.toLowerCase().trim());return t?{operations:{supportsTileMap:t.includes("tilemap")}}:{operations:{supportsTileMap:!1}}}readVersion(e,i){let t=i.currentVersion;return t||(t=9.3),t}load(e){const i=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"],supportsData:!1,validateItem:t=>{for(let a=0;a<t.typeKeywords.length;a++)if(t.typeKeywords[a].toLowerCase()==="elevation 3d layer")return!0;throw new _("portal:invalid-layer-item-type","Invalid layer item type '${type}', expected '${expectedType}' ",{type:"Image Service",expectedType:"Image Service Elevation 3D Layer"})}},e).catch($).then(()=>this._fetchImageService(i))),Promise.resolve(this)}fetchTile(e,i,t,a){const l=(a=a||{signal:null}).signal!=null?a.signal:a.signal=new AbortController().signal,u={responseType:"array-buffer",signal:l},v={noDataValue:a.noDataValue,returnFileInfo:!0};return this.load().then(()=>this._fetchTileAvailability(e,i,t,a)).then(()=>d(this.getTileUrl(e,i,t),u)).then(n=>this._lercDecoder.decode(n.data,v,l)).then(n=>new I(n))}getTileUrl(e,i,t){const a=!this.capabilities.operations.supportsTileMap&&this.supportsBlankTile,l=O({...this.parsedUrl.query,blankTile:!a&&null});return`${this.parsedUrl.path}/tile/${e}/${i}/${t}${l?"?"+l:""}`}async queryElevation(e,i){const{ElevationQuery:t}=await p(()=>import("./chunk-Mh2RlErm.js"),__vite__mapDeps([0,1,2,3]));return c(i),new t().query(this,e,i)}async createElevationSampler(e,i){const{ElevationQuery:t}=await p(()=>import("./chunk-Mh2RlErm.js"),__vite__mapDeps([0,1,2,3]));return c(i),new t().createSampler(this,e,i)}_fetchTileAvailability(e,i,t,a){return this.tilemapCache?this.tilemapCache.fetchAvailability(e,i,t,a):Promise.resolve("unknown")}async _fetchImageService(e){if(this.sourceJSON)return this.sourceJSON;const i={query:{f:"json",...this.parsedUrl.query},responseType:"json",signal:e},t=await d(this.parsedUrl.path,i);t.ssl&&(this.url=this.url?.replace(/^http:/i,"https:")),this.sourceJSON=t.data,this.read(t.data,{origin:"service",url:this.parsedUrl})}get hasOverriddenFetchTile(){return!this.fetchTile[y]}};s([o({readOnly:!0})],r.prototype,"capabilities",void 0),s([h("service","capabilities",["capabilities"])],r.prototype,"readCapabilities",null),s([o({json:{read:{source:"copyrightText"}}})],r.prototype,"copyright",void 0),s([o({readOnly:!0,type:E})],r.prototype,"heightModelInfo",void 0),s([o({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],r.prototype,"path",void 0),s([o({type:["show","hide"]})],r.prototype,"listMode",void 0),s([o({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}},readOnly:!0})],r.prototype,"minScale",void 0),s([o({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}},readOnly:!0})],r.prototype,"maxScale",void 0),s([o({json:{read:!1,write:!1,origins:{"web-document":{read:!1,write:!1}}}})],r.prototype,"opacity",void 0),s([o({type:["ArcGISTiledElevationServiceLayer"]})],r.prototype,"operationalLayerType",void 0),s([o()],r.prototype,"sourceJSON",void 0),s([o({json:{read:!1},value:"elevation",readOnly:!0})],r.prototype,"type",void 0),s([o(j)],r.prototype,"url",void 0),s([o()],r.prototype,"version",void 0),s([h("version",["currentVersion"])],r.prototype,"readVersion",null),r=s([D("esri.layers.ElevationLayer")],r);const y=Symbol("default-fetch-tile");r.prototype.fetchTile[y]=!0;const C=r;export{C as default};
function __vite__mapDeps(indexes) {
  if (!__vite__mapDeps.viteFileDeps) {
    __vite__mapDeps.viteFileDeps = ["assets/chunks/chunk-Mh2RlErm.js","assets/chunks/chunk-ERvgPDZ8.js","assets/chunks/chunk-cDR98evz.js","assets/static/EdgeShader.Y9-TpfL8.css"]
  }
  return indexes.map((i) => __vite__mapDeps.viteFileDeps[i])
}
