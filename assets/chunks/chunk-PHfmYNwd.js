import{fD as a,fE as l,fF as c,fG as f,bE as i,fH as m,fI as u,bu as p,fJ as S,fK as d,fL as x,fM as y,fN as O,fO as h,fP as N,fQ as J,fR as b,fS as P,fT as g,fU as B}from"./chunk-m3jlTyOz.js";import"./chunk-bntHIBZM.js";class v{convertVectorFieldData(e){const t=a.fromJSON(e.pixelBlock),s=l(t,e.type);return Promise.resolve(s!=null?s.toJSON():null)}computeStatisticsHistograms(e){const t=a.fromJSON(e.pixelBlock),s=c(t);return Promise.resolve(s)}async decode(e){const t=await f(e.data,e.options);return t&&t.toJSON()}symbolize(e){e.pixelBlock=a.fromJSON(e.pixelBlock),e.extent=e.extent?i.fromJSON(e.extent):null;const t=this.symbolizer.symbolize(e);return Promise.resolve(t!=null?t.toJSON():null)}async updateSymbolizer(e){this.symbolizer=m.fromJSON(e.symbolizerJSON),e.histograms&&this.symbolizer?.rendererJSON.type==="rasterStretch"&&(this.symbolizer.rendererJSON.histograms=e.histograms)}async updateRasterFunction(e){this.rasterFunction=u(e.rasterFunctionJSON)}async process(e){const t=this.rasterFunction.process({extent:i.fromJSON(e.extent),primaryPixelBlocks:e.primaryPixelBlocks.map(s=>s!=null?a.fromJSON(s):null),primaryPixelSizes:e.primaryPixelSizes?.map(s=>s!=null?p.fromJSON(s):null),primaryRasterIds:e.primaryRasterIds});return t!=null?t.toJSON():null}stretch(e){const t=this.symbolizer.simpleStretch(a.fromJSON(e.srcPixelBlock),e.stretchParams);return Promise.resolve(t?.toJSON())}estimateStatisticsHistograms(e){const t=S(a.fromJSON(e.srcPixelBlock));return Promise.resolve(t)}split(e){const t=d(a.fromJSON(e.srcPixelBlock),e.tileSize,e.maximumPyramidLevel);return t&&t.forEach((s,r)=>{t.set(r,s?.toJSON())}),Promise.resolve(t)}async mosaicAndTransform(e){const t=e.srcPixelBlocks.map(n=>n?new a(n):null),s=x(t,e.srcMosaicSize,{blockWidths:e.blockWidths,alignmentInfo:e.alignmentInfo,clipOffset:e.clipOffset,clipSize:e.clipSize});let r,o=s;return e.coefs&&(o=y(s,e.destDimension,e.coefs,e.sampleSpacing,e.interpolation)),e.projectDirections&&e.gcsGrid&&(r=O(e.destDimension,e.gcsGrid),o=h(o,e.isUV?"vector-uv":"vector-magdir",r)),{pixelBlock:o?.toJSON(),localNorthDirections:r}}async createFlowMesh(e,t){const s={data:new Float32Array(e.flowData.buffer),mask:new Uint8Array(e.flowData.maskBuffer),width:e.flowData.width,height:e.flowData.height},{vertexData:r,indexData:o}=await N(e.meshType,e.simulationSettings,s,t.signal);return{result:{vertexBuffer:r.buffer,indexBuffer:o.buffer},transferList:[r.buffer,o.buffer]}}async getProjectionOffsetGrid(e){const t=i.fromJSON(e.projectedExtent),s=i.fromJSON(e.srcBufferExtent);let r=null;e.datumTransformationSteps&&(r=new J({steps:e.datumTransformationSteps})),(e.includeGCSGrid||b(t.spatialReference,s.spatialReference,r))&&await P();const o=e.rasterTransform?g(e.rasterTransform):null;return B({...e,projectedExtent:t,srcBufferExtent:s,datumTransformation:r,rasterTransform:o})}}export{v as default};
