import{s as h,aL as D,mr as es,at as ts,qC as _,f_ as v,qD as S,eU as f,z as m,B as u,ly as os,N as rs,qE as as,D as U,lz as ns,E as is,bp as cs,lr as ls,L as us}from"./chunk-ERvgPDZ8.js";import{h as ps,N as ds,i as k,o as q,A as ms}from"./chunk-l1o9U56c.js";import"./chunk-cDR98evz.js";const g="upload-assets",w=()=>new Error;class fs extends h{constructor(){super(`${g}:unsupported`,"Layer does not support asset uploads.",w())}}class hs extends h{constructor(){super(`${g}:no-glb-support`,"Layer does not support glb.",w())}}let gs=class extends h{constructor(){super(`${g}:no-supported-source`,"No supported external source found",w())}},ws=class extends h{constructor(){super(`${g}:not-base-64`,"Expected gltf data in base64 format after conversion.",w())}},ys=class extends h{constructor(){super(`${g}:unable-to-prepare-options`,"Unable to prepare uploadAsset request options.",w())}};class $s extends h{constructor(t,s){super(`${g}:bad-response`,`Bad response. Uploaded ${t} items and received ${s} results.`,w())}}let bs=class extends h{constructor(t,s){super(`${g}-layer:upload-failed`,`Failed to upload mesh file ${t}. Error code: ${s?.code??"-1"}. Error message: ${s?.messages??"unknown"}`,w())}};class B extends h{constructor(t){super(`${g}-layer:unsupported-format`,`The service allowed us to upload an asset of FormatID ${t}, but it does not list it in its supported formats.`,w())}}let Ps=class extends h{constructor(){super(`${g}:convert3D-failed`,"convert3D failed.")}};const E={upload:{createFromFiles:.8,loadMesh:.2},uploadAssetBlobs:{prepareAssetItems:.9,uploadAssetItems:.1},uploadConvertibleSource:{uploadEditSource:.5,serviceAssetsToGlb:.5},uploadLocalMesh:{meshToAssetBlob:.5,uploadAssetBlobs:.5}};function y(e,t=o=>{},s){return new Ts(e,t,s)}class Ts{constructor(t,s=r=>{},o){if(this.onProgress=s,this.taskName=o,this._progressMap=new Map,this._startTime=void 0,this._timingsMap=new Map,typeof t=="number"){this._weights={};for(let r=0;r<t;r++){const a=r,n=1/t;this._weights[a]=n,this._progressMap.set(a,0)}}else this._weights=t;this.emitProgress()}emitProgress(){let t=0;for(const[s,o]of this._progressMap.entries())t+=o*this._weights[s];if(t===1&&D("enable-feature:esri-3dofl-upload-timings")){const s=Math.round(performance.now()-(this._startTime??0))/1e3;console.log(`${this.taskName} done in ${s} sec`);for(const[o,r]of this._timingsMap){const a=Math.round(r.end-r.start)/1e3,n=Math.round(a/s*100);console.log(this.taskName??"Task",{stepKey:o,stepTime:a,relativeTime:n})}}this.onProgress(t)}setProgress(t,s){if(this._progressMap.set(t,s),D("enable-feature:esri-3dofl-upload-timings")){const o=performance.now();this._startTime??=o;const r=es(this._timingsMap,t,()=>({start:o,end:0}));s===1&&(r.end=o)}this.emitProgress()}simulate(t,s){return C(o=>this.setProgress(t,o),s)}makeOnProgress(t){return s=>this.setProgress(t,s)}}function C(e=s=>{},t=Ms){const s=performance.now();e(0);const o=setInterval(()=>{const r=performance.now()-s,a=1-Math.exp(-r/t);e(a)},Fs);return ts(()=>{clearInterval(o),e(1)})}function As(e,t=vs){return _(S(e*L/t))}function xs(e,t=Es){return _(S(e*L/t))}const vs=10,Es=10,L=8e-6,Fs=v(50),Ms=v(1e3),O=1e6,I=20*O,js=2e9,Ns=3;async function Ds({data:e,name:t,description:s},o,r){let a=null;try{const n=f(o,"uploads"),i=f(n,"info"),{data:c}=await m(i,{query:{f:"json"},responseType:"json"});u(r);const l=os(o),d=c.maxUploadFileSize*O,$=l?js:d,x=l?Math.min(I,d):I;if(e.size>$)throw new Error("Data too large");const J=f(n,"register"),{data:F}=await m(J,{query:{f:"json",itemName:Is(t),description:s},responseType:"json",method:"post"});if(u(r),!F.success)throw new Error("Registration failed");const{itemID:W}=F.item;a=f(n,W);const K=f(a,"uploadPart"),M=Math.ceil(e.size/x),b=new Array;for(let p=0;p<M;++p)b.push(e.slice(p*x,Math.min((p+1)*x,e.size)));const P=b.slice().reverse(),j=new Array,V=y(M,r?.onProgress,"uploadItem"),Q=async()=>{for(;P.length!==0;){const p=b.length-P.length,T=P.pop(),A=new FormData,Y=V.simulate(p,As(T.size));try{const Z=T;A.append("f","json"),A.append("file",Z),A.append("partId",`${p}`);const{data:ss}=await m(K,{timeout:0,body:A,responseType:"json",method:"post"});if(u(r),!ss.success)throw new Error("Part upload failed")}finally{Y.remove()}}};for(let p=0;p<Ns&&P.length!==0;++p)j.push(Q());await Promise.all(j);const X=f(a,"commit"),{data:N}=await m(X,{query:{f:"json",parts:b.map((p,T)=>T).join(",")},responseType:"json",method:"post"});if(u(r),!N.success)throw new Error("Commit failed");return N.item}catch(n){if(a!=null){const i=f(a,"delete");await m(i,{query:{f:"json"},responseType:"json",method:"post"})}throw n}}function Is(e){return e.replaceAll("/","_").replaceAll("\\","_")}async function ie(e,t,s){const o=e.length;if(!o)return s?.onProgress?.(1),[];const r=y(o,s?.onProgress,"uploadAssets");return Promise.all(e.map((a,n)=>_s(a,t,{...s,onProgress:r.makeOnProgress(n)})))}async function _s(e,{layer:t,ongoingUploads:s},o){const r=s.get(e);if(r)return r;if(!Qs(t))throw new fs;if(Ss(e,t))return o?.onProgress?.(1),e;const a=Us(e,t,o);s.set(e,a);try{await a}finally{s.delete(e)}return e}function Ss(e,t){const{parsedUrl:s}=t;return s!=null&&e.metadata.externalSources.some(o=>ps(o,s))}async function Us(e,t,s){const{metadata:o}=e,{displaySource:r}=o,a=z(r?.source,t),n=!!a,i=o.externalSources.length>0,c=n?ks(a,t,s):i?qs(e,t,s):Bs(e,t,s),l=await c;return u(s),e.addExternalSources([l]),e}async function ks(e,t,s){return{source:await R(e,t,s),original:!0}}async function qs(e,t,s){const o=G(t),{externalSources:r}=e.metadata,a=Ls(r,t);if(!a)throw new gs;const n=y(E.uploadConvertibleSource,s?.onProgress,"uploadConvertibleSource"),i=await R(a,t,{onProgress:n.makeOnProgress("uploadEditSource")});e.addExternalSources([{source:i,original:!0}]);const c=a.reduce((d,{asset:$})=>$ instanceof File?d+$.size:d,0),l=n.simulate("serviceAssetsToGlb",xs(c));try{return{source:await Ws(i,t,o)}}finally{l.remove()}}async function Bs(e,t,s){const o=y(E.uploadLocalMesh,s?.onProgress,"uploadLocalMesh"),r=Cs(e,t,{...s,onProgress:o.makeOnProgress("meshToAssetBlob")});return{source:await H([r],t,{...s,onProgress:o.makeOnProgress("uploadAssetBlobs")}),extent:e.extent.clone(),original:!0}}async function Cs(e,t,s){const o=G(t),r=await e.load(s),a=await r.toBinaryGLTF({ignoreLocalTransform:!0});u(s);const n=await a.buffer();return u(s),{blob:new Blob([n.data],{type:n.type}),assetName:`${rs()}.glb`,assetType:o}}function Ls(e,t){for(const s of e){const o=z(s.source,t);if(o)return o}return null}function z(e,t){if(!e)return null;const{infoFor3D:{supportedFormats:s,editFormats:o}}=t,r=ms(e),a=new Array;let n=!1;for(let i=0;i<r.length;++i){const c=Os(r[i],s);if(!c)return null;o.includes(c.assetType)&&(n=!0),a.push(c)}return n?a:null}function Os(e,t){const s=ds(e,t);return s?{asset:e,assetType:s}:null}async function R(e,t,s){return H(e.map(o=>zs(o,s)),t,s)}async function H(e,t,s){const o=y(E.uploadAssetBlobs,s?.onProgress,"uploadAssetBlobs"),r=await Hs(e,t,{...s,onProgress:o.makeOnProgress("prepareAssetItems")});u(s);const a=r.map(({item:i})=>i),{uploadResults:n}=await Gs(a,t,{...s,onProgress:o.makeOnProgress("uploadAssetItems")});return u(s),e.map((i,c)=>Js(r[c],n[c],t))}async function zs(e,t){const{asset:s,assetType:o}=e;if(s instanceof File)return{blob:s,assetName:s.name,assetType:o};const r=await s.toBlob(t);return u(t),{blob:r,assetName:s.assetName,assetType:o}}async function Rs(e,t,s){const{blob:o,assetType:r,assetName:a}=e;let n=null;try{const i=await Ds({data:o,name:a},t.url,s);u(s),n={assetType:r,assetUploadId:i.itemID}}catch(i){cs(i),Xs().warnOnce(`Service ${t.url} does not support the REST Uploads API.`)}if(!n){const i=await ls(o);if(u(s),!i.isBase64)throw new ws;n={assetType:r,assetData:i.data}}if(!n)throw new ys;return{item:n,assetName:a}}function Hs(e,t,s){const o=y(e.length,s?.onProgress,"prepareAssetItems");return Promise.all(e.map(async(r,a)=>{const n=Rs(await r,t,{...s,onProgress:o.makeOnProgress(a)});return u(s),n}))}async function Gs(e,t,s){const o=C(s?.onProgress);try{const r=await m(f(t.parsedUrl.path,"uploadAssets"),{timeout:0,query:{f:"json",assets:JSON.stringify(e)},method:"post",responseType:"json"});if(u(s),r.data.uploadResults.length!==e.length)throw new $s(e.length,r.data.uploadResults.length);return r.data}finally{o.remove()}}function Js(e,t,s){const{success:o}=t;if(!o){const{error:l}=t;throw new bs(e.assetName,l)}const{assetHash:r}=t,{assetName:a,item:{assetType:n}}=e,{infoFor3D:{supportedFormats:i}}=s,c=as(n,i);if(!c)throw new B(n);return new k(a,c,[new q(`${s.parsedUrl.path}/assets/${r}`,r)])}async function Ws(e,t,s){const o=e.map(({assetName:l,parts:d})=>({assetName:l,assetHash:d[0].partHash})),r=t.capabilities?.operations.supportsAsyncConvert3D,a={f:"json",assets:JSON.stringify(o),transportType:"esriTransportTypeUrl",targetFormat:s,async:r},n=f(t.parsedUrl.path,"convert3D");let i;try{i=(await(r?Vs:Ks)(n,{query:a,responseType:"json",timeout:0})).data}catch{throw new Ps}const{supportedFormats:c}=t.infoFor3D;return i.assets.map(l=>{const d=U(l.contentType,c);if(!d)throw new B(d);return new k(l.assetName,l.contentType,[new q(l.assetURL,l.assetHash)])})}function Ks(e,t){return m(e,t)}async function Vs(e,t){const s=(await m(e,t)).data.statusUrl;for(;;){const o=(await m(s,{query:{f:"json"},responseType:"json"})).data;switch(o.status){case"Completed":return m(o.resultUrl,{query:{f:"json"},responseType:"json"});case"CompletedWithErrors":throw new Error(o.status);case"Failed ImportChanges":case"InProgress":case"Pending":case"ExportAttachments":case"ExportChanges":case"ExportingData":case"ExportingSnapshot":case"ImportAttachments":case"ProvisioningReplica":case"UnRegisteringReplica":break;default:throw new Error}await ns(Ys)}}function Qs(e){return!!e.infoFor3D&&!!e.url}function G(e){const{infoFor3D:t}=e,s=U("model/gltf-binary",t.supportedFormats)??is("glb",t.supportedFormats);if(!s)throw new hs;return s}function Xs(){return us.getLogger("esri.layers.graphics.sources.support.uploadAssets")}const Ys=v(1e3);export{ie as uploadAssets};
