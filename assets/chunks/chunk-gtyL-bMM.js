import{bA as h,h1 as y,h3 as g,lE as l,gZ as i,lo as S}from"./chunk-xdbuWCSg.js";import{b as d,c as m,a as f,s as p}from"./chunk-B3AFDltd.js";import{u as b}from"./chunk-X13qFF8j.js";const L=(t,e)=>!(e.maxScale&&t<e.maxScale||e.minScale&&t>=e.minScale);function A(t,e,n=10){const a={xmin:e.x-n,ymin:e.y-n,xmax:e.x+n,ymax:e.y+n},o={x:a.xmin,y:a.ymin},r={x:a.xmax,y:a.ymax},s=t.toMap(o),c=t.toMap(r);return new h({xmin:s.x,ymin:c.y,xmax:c.x,ymax:s.y,spatialReference:t.spatialReference})}const I={maxScale:{type:Number,default:0},minScale:{type:Number,default:0},cursor:{type:String,default:""},title:{type:String,default:""},visible:{type:Boolean,default:!0},opacity:{type:Number,default:1},index:{type:Number,default:void 0},orphan:{type:Boolean,default:!1}},T=t=>class extends y{name;handler;cacheData;constructor(n,a){super(),this.name=n,this.handler=a}add(){t.on(this.name,this.handler),this.removeHandler=()=>t.off(this.name,this.handler)}};function R(t,e,n){const a=()=>t instanceof S?t.layers:t;if(n.orphan)return;e[d]=n.index,e[m]=n.indexTopping,t.add(e);const o=()=>{const r=a();M(r).forEach((c,u)=>{setTimeout(()=>{t.reorder(c,u)})})};e.when(()=>{o()}),typeof n.index=="number"&&o(),g(()=>[n.index,n.indexTopping],([r,s])=>{typeof r=="number"&&(e[d]=r,e[m]=s,o())}),l(()=>{t.remove(e)})}function w(t,e){b(t,e),i(()=>{t.title=e.title}),i(()=>{t[f]=e.cursor}),i(()=>{t.opacity=e.opacity})}function B(t,e){w(t,e),i(()=>{t[f]=e.cursor}),i(()=>{t.title=e.title}),i(()=>{t.maxScale=e.maxScale}),i(()=>{t.minScale=e.minScale}),i(()=>{t.opacity=e.opacity})}function v(t,e,n){const a=t[p];if(!a)throw new Error("mitter is not defined");const o=T(a),r=new o("watch:scale",([s])=>{const c=L(s,{maxScale:e.maxScale,minScale:e.minScale});n(c)});r.add(),l(()=>{r.remove()})}function M(t){const e=new x,n=new x;return t.forEach(a=>{const o=a[d];a[m]?n.add(a,o):e.add(a,o)}),[...e.toArray(),...n.toArray()]}class x{record={};add(e,n){if(typeof n=="number"){let a=this.record[n];for(;a;)n++,a=this.record[n];this.record[n]=e}else this.record[this.getMaxIndex()+1]=e}getMaxIndex(){const e=Object.keys(this.record);return e.length?Math.max(...e.map(Number)):0}toArray(){return Object.values(this.record)}}export{R as a,w as b,T as c,v as d,A as e,L as i,I as p,B as u};
